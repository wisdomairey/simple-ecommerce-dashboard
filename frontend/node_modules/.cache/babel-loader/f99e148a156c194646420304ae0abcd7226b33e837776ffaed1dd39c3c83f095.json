{"ast":null,"code":"// Format currency\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  }).format(amount);\n};\n\n// Format date\nexport const formatDate = date => {\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  }).format(new Date(date));\n};\n\n// Format date with time\nexport const formatDateTime = date => {\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(new Date(date));\n};\n\n// Format number with commas\nexport const formatNumber = number => {\n  return new Intl.NumberFormat('en-US').format(number);\n};\n\n// Calculate percentage change\nexport const calculatePercentageChange = (current, previous) => {\n  if (previous === 0) return current > 0 ? 100 : 0;\n  return (current - previous) / previous * 100;\n};\n\n// Truncate text\nexport const truncateText = (text, maxLength) => {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n};\n\n// Debounce function\nexport const debounce = (func, wait) => {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n// Generate random color for charts\nexport const getRandomColor = () => {\n  const colors = ['#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6', '#EC4899', '#14B8A6', '#F97316'];\n  return colors[Math.floor(Math.random() * colors.length)];\n};\n\n// Validate email\nexport const isValidEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n// Get order status color\nexport const getOrderStatusColor = status => {\n  const colors = {\n    pending: 'badge-warning',\n    processing: 'badge-info',\n    shipped: 'badge-info',\n    delivered: 'badge-success',\n    cancelled: 'badge-danger'\n  };\n  return colors[status] || 'badge-info';\n};\n\n// Get payment status color\nexport const getPaymentStatusColor = status => {\n  const colors = {\n    pending: 'badge-warning',\n    paid: 'badge-success',\n    failed: 'badge-danger',\n    refunded: 'badge-info'\n  };\n  return colors[status] || 'badge-warning';\n};\n\n// Generate order number\nexport const generateOrderNumber = () => {\n  const timestamp = Date.now();\n  const random = Math.floor(Math.random() * 1000);\n  return `ORD-${timestamp}-${random.toString().padStart(3, '0')}`;\n};\n\n// Format file size\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n// Check if image URL is valid\nexport const isValidImageUrl = url => {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.onload = () => resolve(true);\n    img.onerror = () => resolve(false);\n    img.src = url;\n  });\n};\n\n// Get initials from name\nexport const getInitials = name => {\n  return name.split(' ').map(word => word.charAt(0).toUpperCase()).join('').substring(0, 2);\n};\n\n// Capitalize first letter\nexport const capitalize = str => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\n// Get time ago\nexport const getTimeAgo = date => {\n  const now = new Date();\n  const past = new Date(date);\n  const diffMs = now - past;\n  const diffSec = Math.floor(diffMs / 1000);\n  const diffMin = Math.floor(diffSec / 60);\n  const diffHour = Math.floor(diffMin / 60);\n  const diffDay = Math.floor(diffHour / 24);\n  if (diffDay > 0) return `${diffDay} day${diffDay > 1 ? 's' : ''} ago`;\n  if (diffHour > 0) return `${diffHour} hour${diffHour > 1 ? 's' : ''} ago`;\n  if (diffMin > 0) return `${diffMin} minute${diffMin > 1 ? 's' : ''} ago`;\n  return 'Just now';\n};","map":{"version":3,"names":["formatCurrency","amount","Intl","NumberFormat","style","currency","format","formatDate","date","DateTimeFormat","year","month","day","Date","formatDateTime","hour","minute","formatNumber","number","calculatePercentageChange","current","previous","truncateText","text","maxLength","length","substring","debounce","func","wait","timeout","executedFunction","args","later","clearTimeout","setTimeout","getRandomColor","colors","Math","floor","random","isValidEmail","email","emailRegex","test","getOrderStatusColor","status","pending","processing","shipped","delivered","cancelled","getPaymentStatusColor","paid","failed","refunded","generateOrderNumber","timestamp","now","toString","padStart","formatFileSize","bytes","k","sizes","i","log","parseFloat","pow","toFixed","isValidImageUrl","url","Promise","resolve","img","Image","onload","onerror","src","getInitials","name","split","map","word","charAt","toUpperCase","join","capitalize","str","slice","getTimeAgo","past","diffMs","diffSec","diffMin","diffHour","diffDay"],"sources":["C:/Users/ADMIN/Documents/Web Designs/full-stack/simple-ecommerce-dashboard/frontend/src/utils/helpers.js"],"sourcesContent":["// Format currency\r\nexport const formatCurrency = (amount) => {\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  }).format(amount);\r\n};\r\n\r\n// Format date\r\nexport const formatDate = (date) => {\r\n  return new Intl.DateTimeFormat('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n  }).format(new Date(date));\r\n};\r\n\r\n// Format date with time\r\nexport const formatDateTime = (date) => {\r\n  return new Intl.DateTimeFormat('en-US', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n  }).format(new Date(date));\r\n};\r\n\r\n// Format number with commas\r\nexport const formatNumber = (number) => {\r\n  return new Intl.NumberFormat('en-US').format(number);\r\n};\r\n\r\n// Calculate percentage change\r\nexport const calculatePercentageChange = (current, previous) => {\r\n  if (previous === 0) return current > 0 ? 100 : 0;\r\n  return ((current - previous) / previous) * 100;\r\n};\r\n\r\n// Truncate text\r\nexport const truncateText = (text, maxLength) => {\r\n  if (text.length <= maxLength) return text;\r\n  return text.substring(0, maxLength) + '...';\r\n};\r\n\r\n// Debounce function\r\nexport const debounce = (func, wait) => {\r\n  let timeout;\r\n  return function executedFunction(...args) {\r\n    const later = () => {\r\n      clearTimeout(timeout);\r\n      func(...args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n  };\r\n};\r\n\r\n// Generate random color for charts\r\nexport const getRandomColor = () => {\r\n  const colors = [\r\n    '#3B82F6', '#EF4444', '#10B981', '#F59E0B',\r\n    '#8B5CF6', '#EC4899', '#14B8A6', '#F97316'\r\n  ];\r\n  return colors[Math.floor(Math.random() * colors.length)];\r\n};\r\n\r\n// Validate email\r\nexport const isValidEmail = (email) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n// Get order status color\r\nexport const getOrderStatusColor = (status) => {\r\n  const colors = {\r\n    pending: 'badge-warning',\r\n    processing: 'badge-info',\r\n    shipped: 'badge-info',\r\n    delivered: 'badge-success',\r\n    cancelled: 'badge-danger'\r\n  };\r\n  return colors[status] || 'badge-info';\r\n};\r\n\r\n// Get payment status color\r\nexport const getPaymentStatusColor = (status) => {\r\n  const colors = {\r\n    pending: 'badge-warning',\r\n    paid: 'badge-success',\r\n    failed: 'badge-danger',\r\n    refunded: 'badge-info'\r\n  };\r\n  return colors[status] || 'badge-warning';\r\n};\r\n\r\n// Generate order number\r\nexport const generateOrderNumber = () => {\r\n  const timestamp = Date.now();\r\n  const random = Math.floor(Math.random() * 1000);\r\n  return `ORD-${timestamp}-${random.toString().padStart(3, '0')}`;\r\n};\r\n\r\n// Format file size\r\nexport const formatFileSize = (bytes) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n\r\n// Check if image URL is valid\r\nexport const isValidImageUrl = (url) => {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    img.onload = () => resolve(true);\r\n    img.onerror = () => resolve(false);\r\n    img.src = url;\r\n  });\r\n};\r\n\r\n// Get initials from name\r\nexport const getInitials = (name) => {\r\n  return name\r\n    .split(' ')\r\n    .map(word => word.charAt(0).toUpperCase())\r\n    .join('')\r\n    .substring(0, 2);\r\n};\r\n\r\n// Capitalize first letter\r\nexport const capitalize = (str) => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\n\r\n// Get time ago\r\nexport const getTimeAgo = (date) => {\r\n  const now = new Date();\r\n  const past = new Date(date);\r\n  const diffMs = now - past;\r\n  const diffSec = Math.floor(diffMs / 1000);\r\n  const diffMin = Math.floor(diffSec / 60);\r\n  const diffHour = Math.floor(diffMin / 60);\r\n  const diffDay = Math.floor(diffHour / 24);\r\n\r\n  if (diffDay > 0) return `${diffDay} day${diffDay > 1 ? 's' : ''} ago`;\r\n  if (diffHour > 0) return `${diffHour} hour${diffHour > 1 ? 's' : ''} ago`;\r\n  if (diffMin > 0) return `${diffMin} minute${diffMin > 1 ? 's' : ''} ago`;\r\n  return 'Just now';\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}