{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Documents\\\\Web Designs\\\\full-stack\\\\upwork\\\\simple-ecommerce-dashboard\\\\frontend\\\\src\\\\context\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// Cart reducer\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOAD_CART':\n      return {\n        ...state,\n        items: action.payload\n      };\n    case 'ADD_ITEM':\n      const existingItemIndex = state.items.findIndex(item => item.productId === action.payload.productId);\n      if (existingItemIndex >= 0) {\n        // Item exists, update quantity\n        const updatedItems = state.items.map((item, index) => index === existingItemIndex ? {\n          ...item,\n          quantity: item.quantity + action.payload.quantity\n        } : item);\n        return {\n          ...state,\n          items: updatedItems\n        };\n      } else {\n        // New item, add to cart\n        return {\n          ...state,\n          items: [...state.items, action.payload]\n        };\n      }\n    case 'UPDATE_QUANTITY':\n      return {\n        ...state,\n        items: state.items.map(item => item.productId === action.payload.productId ? {\n          ...item,\n          quantity: action.payload.quantity\n        } : item).filter(item => item.quantity > 0)\n      };\n    case 'REMOVE_ITEM':\n      return {\n        ...state,\n        items: state.items.filter(item => item.productId !== action.payload.productId)\n      };\n    case 'CLEAR_CART':\n      return {\n        ...state,\n        items: []\n      };\n    default:\n      return state;\n  }\n};\n\n// Initial state\nconst initialState = {\n  items: []\n};\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(cartReducer, initialState);\n\n  // Load cart from localStorage on mount\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      try {\n        const cartItems = JSON.parse(savedCart);\n        dispatch({\n          type: 'LOAD_CART',\n          payload: cartItems\n        });\n      } catch (error) {\n        console.error('Error loading cart from localStorage:', error);\n      }\n    }\n  }, []);\n\n  // Save cart to localStorage whenever items change\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(state.items));\n  }, [state.items]);\n\n  // Add item to cart\n  const addToCart = (product, quantity = 1) => {\n    const cartItem = {\n      productId: product._id,\n      title: product.title,\n      price: product.price,\n      image: product.image,\n      quantity: quantity,\n      stock: product.stock\n    };\n    dispatch({\n      type: 'ADD_ITEM',\n      payload: cartItem\n    });\n    toast.success(`${product.title} added to cart!`);\n  };\n\n  // Update item quantity\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    const item = state.items.find(item => item.productId === productId);\n    if (item && quantity > item.stock) {\n      toast.error(`Only ${item.stock} items available in stock`);\n      return;\n    }\n    dispatch({\n      type: 'UPDATE_QUANTITY',\n      payload: {\n        productId,\n        quantity\n      }\n    });\n  };\n\n  // Remove item from cart\n  const removeFromCart = productId => {\n    const item = state.items.find(item => item.productId === productId);\n    dispatch({\n      type: 'REMOVE_ITEM',\n      payload: {\n        productId\n      }\n    });\n    if (item) {\n      toast.success(`${item.title} removed from cart`);\n    }\n  };\n\n  // Clear entire cart\n  const clearCart = () => {\n    dispatch({\n      type: 'CLEAR_CART'\n    });\n    toast.success('Cart cleared');\n  };\n\n  // Get cart totals\n  const getCartTotals = () => {\n    const subtotal = state.items.reduce((total, item) => total + item.price * item.quantity, 0);\n    const itemCount = state.items.reduce((total, item) => total + item.quantity, 0);\n    const tax = subtotal * 0.08; // 8% tax\n    const shipping = subtotal > 50 ? 0 : 10; // Free shipping over $50\n    const total = subtotal + tax + shipping;\n    return {\n      subtotal: Math.round(subtotal * 100) / 100,\n      tax: Math.round(tax * 100) / 100,\n      shipping: Math.round(shipping * 100) / 100,\n      total: Math.round(total * 100) / 100,\n      itemCount\n    };\n  };\n\n  // Check if product is in cart\n  const isInCart = productId => {\n    return state.items.some(item => item.productId === productId);\n  };\n\n  // Get item quantity in cart\n  const getItemQuantity = productId => {\n    const item = state.items.find(item => item.productId === productId);\n    return item ? item.quantity : 0;\n  };\n  const value = {\n    items: state.items,\n    addToCart,\n    updateQuantity,\n    removeFromCart,\n    clearCart,\n    getCartTotals,\n    isInCart,\n    getItemQuantity,\n    itemCount: state.items.reduce((total, item) => total + item.quantity, 0)\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","toast","jsxDEV","_jsxDEV","CartContext","cartReducer","state","action","type","items","payload","existingItemIndex","findIndex","item","productId","updatedItems","map","index","quantity","filter","initialState","CartProvider","children","_s","dispatch","savedCart","localStorage","getItem","cartItems","JSON","parse","error","console","setItem","stringify","addToCart","product","cartItem","_id","title","price","image","stock","success","updateQuantity","removeFromCart","find","clearCart","getCartTotals","subtotal","reduce","total","itemCount","tax","shipping","Math","round","isInCart","some","getItemQuantity","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/ADMIN/Documents/Web Designs/full-stack/upwork/simple-ecommerce-dashboard/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst CartContext = createContext();\r\n\r\n// Cart reducer\r\nconst cartReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'LOAD_CART':\r\n      return {\r\n        ...state,\r\n        items: action.payload\r\n      };\r\n    case 'ADD_ITEM':\r\n      const existingItemIndex = state.items.findIndex(\r\n        item => item.productId === action.payload.productId\r\n      );\r\n      \r\n      if (existingItemIndex >= 0) {\r\n        // Item exists, update quantity\r\n        const updatedItems = state.items.map((item, index) => \r\n          index === existingItemIndex \r\n            ? { ...item, quantity: item.quantity + action.payload.quantity }\r\n            : item\r\n        );\r\n        return {\r\n          ...state,\r\n          items: updatedItems\r\n        };\r\n      } else {\r\n        // New item, add to cart\r\n        return {\r\n          ...state,\r\n          items: [...state.items, action.payload]\r\n        };\r\n      }\r\n    case 'UPDATE_QUANTITY':\r\n      return {\r\n        ...state,\r\n        items: state.items.map(item =>\r\n          item.productId === action.payload.productId\r\n            ? { ...item, quantity: action.payload.quantity }\r\n            : item\r\n        ).filter(item => item.quantity > 0)\r\n      };\r\n    case 'REMOVE_ITEM':\r\n      return {\r\n        ...state,\r\n        items: state.items.filter(item => item.productId !== action.payload.productId)\r\n      };\r\n    case 'CLEAR_CART':\r\n      return {\r\n        ...state,\r\n        items: []\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Initial state\r\nconst initialState = {\r\n  items: []\r\n};\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(cartReducer, initialState);\r\n\r\n  // Load cart from localStorage on mount\r\n  useEffect(() => {\r\n    const savedCart = localStorage.getItem('cart');\r\n    if (savedCart) {\r\n      try {\r\n        const cartItems = JSON.parse(savedCart);\r\n        dispatch({ type: 'LOAD_CART', payload: cartItems });\r\n      } catch (error) {\r\n        console.error('Error loading cart from localStorage:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save cart to localStorage whenever items change\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(state.items));\r\n  }, [state.items]);\r\n\r\n  // Add item to cart\r\n  const addToCart = (product, quantity = 1) => {\r\n    const cartItem = {\r\n      productId: product._id,\r\n      title: product.title,\r\n      price: product.price,\r\n      image: product.image,\r\n      quantity: quantity,\r\n      stock: product.stock\r\n    };\r\n\r\n    dispatch({ type: 'ADD_ITEM', payload: cartItem });\r\n    toast.success(`${product.title} added to cart!`);\r\n  };\r\n\r\n  // Update item quantity\r\n  const updateQuantity = (productId, quantity) => {\r\n    if (quantity <= 0) {\r\n      removeFromCart(productId);\r\n      return;\r\n    }\r\n\r\n    const item = state.items.find(item => item.productId === productId);\r\n    if (item && quantity > item.stock) {\r\n      toast.error(`Only ${item.stock} items available in stock`);\r\n      return;\r\n    }\r\n\r\n    dispatch({ \r\n      type: 'UPDATE_QUANTITY', \r\n      payload: { productId, quantity } \r\n    });\r\n  };\r\n\r\n  // Remove item from cart\r\n  const removeFromCart = (productId) => {\r\n    const item = state.items.find(item => item.productId === productId);\r\n    dispatch({ type: 'REMOVE_ITEM', payload: { productId } });\r\n    if (item) {\r\n      toast.success(`${item.title} removed from cart`);\r\n    }\r\n  };\r\n\r\n  // Clear entire cart\r\n  const clearCart = () => {\r\n    dispatch({ type: 'CLEAR_CART' });\r\n    toast.success('Cart cleared');\r\n  };\r\n\r\n  // Get cart totals\r\n  const getCartTotals = () => {\r\n    const subtotal = state.items.reduce((total, item) => \r\n      total + (item.price * item.quantity), 0\r\n    );\r\n    const itemCount = state.items.reduce((total, item) => \r\n      total + item.quantity, 0\r\n    );\r\n    const tax = subtotal * 0.08; // 8% tax\r\n    const shipping = subtotal > 50 ? 0 : 10; // Free shipping over $50\r\n    const total = subtotal + tax + shipping;\r\n\r\n    return {\r\n      subtotal: Math.round(subtotal * 100) / 100,\r\n      tax: Math.round(tax * 100) / 100,\r\n      shipping: Math.round(shipping * 100) / 100,\r\n      total: Math.round(total * 100) / 100,\r\n      itemCount\r\n    };\r\n  };\r\n\r\n  // Check if product is in cart\r\n  const isInCart = (productId) => {\r\n    return state.items.some(item => item.productId === productId);\r\n  };\r\n\r\n  // Get item quantity in cart\r\n  const getItemQuantity = (productId) => {\r\n    const item = state.items.find(item => item.productId === productId);\r\n    return item ? item.quantity : 0;\r\n  };\r\n\r\n  const value = {\r\n    items: state.items,\r\n    addToCart,\r\n    updateQuantity,\r\n    removeFromCart,\r\n    clearCart,\r\n    getCartTotals,\r\n    isInCart,\r\n    getItemQuantity,\r\n    itemCount: state.items.reduce((total, item) => total + item.quantity, 0)\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={value}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC/E,OAAOC,KAAK,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAEnC;AACA,MAAMQ,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,WAAW;MACd,OAAO;QACL,GAAGF,KAAK;QACRG,KAAK,EAAEF,MAAM,CAACG;MAChB,CAAC;IACH,KAAK,UAAU;MACb,MAAMC,iBAAiB,GAAGL,KAAK,CAACG,KAAK,CAACG,SAAS,CAC7CC,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAKP,MAAM,CAACG,OAAO,CAACI,SAC5C,CAAC;MAED,IAAIH,iBAAiB,IAAI,CAAC,EAAE;QAC1B;QACA,MAAMI,YAAY,GAAGT,KAAK,CAACG,KAAK,CAACO,GAAG,CAAC,CAACH,IAAI,EAAEI,KAAK,KAC/CA,KAAK,KAAKN,iBAAiB,GACvB;UAAE,GAAGE,IAAI;UAAEK,QAAQ,EAAEL,IAAI,CAACK,QAAQ,GAAGX,MAAM,CAACG,OAAO,CAACQ;QAAS,CAAC,GAC9DL,IACN,CAAC;QACD,OAAO;UACL,GAAGP,KAAK;UACRG,KAAK,EAAEM;QACT,CAAC;MACH,CAAC,MAAM;QACL;QACA,OAAO;UACL,GAAGT,KAAK;UACRG,KAAK,EAAE,CAAC,GAAGH,KAAK,CAACG,KAAK,EAAEF,MAAM,CAACG,OAAO;QACxC,CAAC;MACH;IACF,KAAK,iBAAiB;MACpB,OAAO;QACL,GAAGJ,KAAK;QACRG,KAAK,EAAEH,KAAK,CAACG,KAAK,CAACO,GAAG,CAACH,IAAI,IACzBA,IAAI,CAACC,SAAS,KAAKP,MAAM,CAACG,OAAO,CAACI,SAAS,GACvC;UAAE,GAAGD,IAAI;UAAEK,QAAQ,EAAEX,MAAM,CAACG,OAAO,CAACQ;QAAS,CAAC,GAC9CL,IACN,CAAC,CAACM,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACK,QAAQ,GAAG,CAAC;MACpC,CAAC;IACH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGZ,KAAK;QACRG,KAAK,EAAEH,KAAK,CAACG,KAAK,CAACU,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAKP,MAAM,CAACG,OAAO,CAACI,SAAS;MAC/E,CAAC;IACH,KAAK,YAAY;MACf,OAAO;QACL,GAAGR,KAAK;QACRG,KAAK,EAAE;MACT,CAAC;IACH;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMc,YAAY,GAAG;EACnBX,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMY,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACjB,KAAK,EAAEkB,QAAQ,CAAC,GAAGzB,UAAU,CAACM,WAAW,EAAEe,YAAY,CAAC;;EAE/D;EACApB,SAAS,CAAC,MAAM;IACd,MAAMyB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC9C,IAAIF,SAAS,EAAE;MACb,IAAI;QACF,MAAMG,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC;QACvCD,QAAQ,CAAC;UAAEhB,IAAI,EAAE,WAAW;UAAEE,OAAO,EAAEkB;QAAU,CAAC,CAAC;MACrD,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA/B,SAAS,CAAC,MAAM;IACd0B,YAAY,CAACO,OAAO,CAAC,MAAM,EAAEJ,IAAI,CAACK,SAAS,CAAC5B,KAAK,CAACG,KAAK,CAAC,CAAC;EAC3D,CAAC,EAAE,CAACH,KAAK,CAACG,KAAK,CAAC,CAAC;;EAEjB;EACA,MAAM0B,SAAS,GAAGA,CAACC,OAAO,EAAElB,QAAQ,GAAG,CAAC,KAAK;IAC3C,MAAMmB,QAAQ,GAAG;MACfvB,SAAS,EAAEsB,OAAO,CAACE,GAAG;MACtBC,KAAK,EAAEH,OAAO,CAACG,KAAK;MACpBC,KAAK,EAAEJ,OAAO,CAACI,KAAK;MACpBC,KAAK,EAAEL,OAAO,CAACK,KAAK;MACpBvB,QAAQ,EAAEA,QAAQ;MAClBwB,KAAK,EAAEN,OAAO,CAACM;IACjB,CAAC;IAEDlB,QAAQ,CAAC;MAAEhB,IAAI,EAAE,UAAU;MAAEE,OAAO,EAAE2B;IAAS,CAAC,CAAC;IACjDpC,KAAK,CAAC0C,OAAO,CAAC,GAAGP,OAAO,CAACG,KAAK,iBAAiB,CAAC;EAClD,CAAC;;EAED;EACA,MAAMK,cAAc,GAAGA,CAAC9B,SAAS,EAAEI,QAAQ,KAAK;IAC9C,IAAIA,QAAQ,IAAI,CAAC,EAAE;MACjB2B,cAAc,CAAC/B,SAAS,CAAC;MACzB;IACF;IAEA,MAAMD,IAAI,GAAGP,KAAK,CAACG,KAAK,CAACqC,IAAI,CAACjC,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAKA,SAAS,CAAC;IACnE,IAAID,IAAI,IAAIK,QAAQ,GAAGL,IAAI,CAAC6B,KAAK,EAAE;MACjCzC,KAAK,CAAC8B,KAAK,CAAC,QAAQlB,IAAI,CAAC6B,KAAK,2BAA2B,CAAC;MAC1D;IACF;IAEAlB,QAAQ,CAAC;MACPhB,IAAI,EAAE,iBAAiB;MACvBE,OAAO,EAAE;QAAEI,SAAS;QAAEI;MAAS;IACjC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAM2B,cAAc,GAAI/B,SAAS,IAAK;IACpC,MAAMD,IAAI,GAAGP,KAAK,CAACG,KAAK,CAACqC,IAAI,CAACjC,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAKA,SAAS,CAAC;IACnEU,QAAQ,CAAC;MAAEhB,IAAI,EAAE,aAAa;MAAEE,OAAO,EAAE;QAAEI;MAAU;IAAE,CAAC,CAAC;IACzD,IAAID,IAAI,EAAE;MACRZ,KAAK,CAAC0C,OAAO,CAAC,GAAG9B,IAAI,CAAC0B,KAAK,oBAAoB,CAAC;IAClD;EACF,CAAC;;EAED;EACA,MAAMQ,SAAS,GAAGA,CAAA,KAAM;IACtBvB,QAAQ,CAAC;MAAEhB,IAAI,EAAE;IAAa,CAAC,CAAC;IAChCP,KAAK,CAAC0C,OAAO,CAAC,cAAc,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMK,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,QAAQ,GAAG3C,KAAK,CAACG,KAAK,CAACyC,MAAM,CAAC,CAACC,KAAK,EAAEtC,IAAI,KAC9CsC,KAAK,GAAItC,IAAI,CAAC2B,KAAK,GAAG3B,IAAI,CAACK,QAAS,EAAE,CACxC,CAAC;IACD,MAAMkC,SAAS,GAAG9C,KAAK,CAACG,KAAK,CAACyC,MAAM,CAAC,CAACC,KAAK,EAAEtC,IAAI,KAC/CsC,KAAK,GAAGtC,IAAI,CAACK,QAAQ,EAAE,CACzB,CAAC;IACD,MAAMmC,GAAG,GAAGJ,QAAQ,GAAG,IAAI,CAAC,CAAC;IAC7B,MAAMK,QAAQ,GAAGL,QAAQ,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;IACzC,MAAME,KAAK,GAAGF,QAAQ,GAAGI,GAAG,GAAGC,QAAQ;IAEvC,OAAO;MACLL,QAAQ,EAAEM,IAAI,CAACC,KAAK,CAACP,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG;MAC1CI,GAAG,EAAEE,IAAI,CAACC,KAAK,CAACH,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG;MAChCC,QAAQ,EAAEC,IAAI,CAACC,KAAK,CAACF,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG;MAC1CH,KAAK,EAAEI,IAAI,CAACC,KAAK,CAACL,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG;MACpCC;IACF,CAAC;EACH,CAAC;;EAED;EACA,MAAMK,QAAQ,GAAI3C,SAAS,IAAK;IAC9B,OAAOR,KAAK,CAACG,KAAK,CAACiD,IAAI,CAAC7C,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAKA,SAAS,CAAC;EAC/D,CAAC;;EAED;EACA,MAAM6C,eAAe,GAAI7C,SAAS,IAAK;IACrC,MAAMD,IAAI,GAAGP,KAAK,CAACG,KAAK,CAACqC,IAAI,CAACjC,IAAI,IAAIA,IAAI,CAACC,SAAS,KAAKA,SAAS,CAAC;IACnE,OAAOD,IAAI,GAAGA,IAAI,CAACK,QAAQ,GAAG,CAAC;EACjC,CAAC;EAED,MAAM0C,KAAK,GAAG;IACZnD,KAAK,EAAEH,KAAK,CAACG,KAAK;IAClB0B,SAAS;IACTS,cAAc;IACdC,cAAc;IACdE,SAAS;IACTC,aAAa;IACbS,QAAQ;IACRE,eAAe;IACfP,SAAS,EAAE9C,KAAK,CAACG,KAAK,CAACyC,MAAM,CAAC,CAACC,KAAK,EAAEtC,IAAI,KAAKsC,KAAK,GAAGtC,IAAI,CAACK,QAAQ,EAAE,CAAC;EACzE,CAAC;EAED,oBACEf,OAAA,CAACC,WAAW,CAACyD,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAtC,QAAA,EAChCA;EAAQ;IAAAwC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC1C,EAAA,CAvHWF,YAAY;AAAA6C,EAAA,GAAZ7C,YAAY;AAyHzB,OAAO,MAAM8C,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGvE,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACiE,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}